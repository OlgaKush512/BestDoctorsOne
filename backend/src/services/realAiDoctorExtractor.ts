export class RealAIDoctorExtractor {
  
  public async extractDoctorsFromHTML(html: string, searchParams: any): Promise<any[]> {
    console.log('ü§ñ Using REAL AI to extract doctors from HTML...');
    
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML
      const textContent = this.extractTextFromHTML(html);
      console.log(`üìù Extracted ${textContent.length} characters of text content`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const doctors = await this.useRealAI(textContent, searchParams);
      
      console.log(`ü§ñ Real AI extracted ${doctors.length} doctors`);
      return doctors;
      
    } catch (error) {
      console.error('Real AI extraction error:', error);
      return [];
    }
  }

  private async useRealAI(textContent: string, searchParams: any): Promise<any[]> {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –º–æ–¥–µ–ª–∏
    const prompt = this.createAIPrompt(textContent, searchParams);
    
    try {
      // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é AI –º–æ–¥–µ–ª—å (OpenAI GPT, Claude, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å)
      const aiResponse = await this.callAIModel(prompt);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
      const doctors = this.parseAIResponse(aiResponse);
      
      return doctors;
      
    } catch (error) {
      console.error('AI model call failed:', error);
      return [];
    }
  }

  private createAIPrompt(textContent: string, searchParams: any): string {
    return `
You are an expert at extracting structured information from French medical website content.

TASK: Extract doctor information from the following text content from a French medical website search results page.

SEARCH CONTEXT:
- Specialty: ${searchParams.specialty}
- Location: ${searchParams.location}

INSTRUCTIONS:
1. Analyze the text content and identify sections that describe individual doctors/medical professionals
2. For each doctor found, extract:
   - Name (including title like Dr./Docteur if present)
   - Medical specialty
   - Address/location
   - Availability information if mentioned
3. Ignore navigation elements, filters, advertisements, and other non-doctor content
4. Return ONLY a valid JSON array of doctor objects
5. If no doctors are found, return an empty array []

EXPECTED OUTPUT FORMAT:
[
  {
    "name": "Dr. [First Name] [Last Name]",
    "specialty": "[Medical Specialty]",
    "address": "[Address or Location]",
    "availability": ["[Availability info]"],
    "next_availability": "[Next available slot or null]"
  }
]

TEXT CONTENT TO ANALYZE:
${textContent.substring(0, 8000)}

Return only the JSON array, no other text or explanation.
`;
  }

  private async callAIModel(prompt: string): Promise<string> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, OpenAI GPT API, Claude API, –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch –∫ OpenAI API
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      console.log('‚ö†Ô∏è No OpenAI API key found, using fallback analysis');
      return this.fallbackAIAnalysis(prompt);
    }

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: 'You are an expert at extracting structured medical information from French websites. Always return valid JSON.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 2000,
          temperature: 0.1
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data: any = await response.json();
      return data.choices?.[0]?.message?.content || '[]';

    } catch (error) {
      console.error('OpenAI API call failed:', error);
      return this.fallbackAIAnalysis(prompt);
    }
  }

  private fallbackAIAnalysis(prompt: string): string {
    // Fallback –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('üîÑ Using fallback AI analysis...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    const textMatch = prompt.match(/TEXT CONTENT TO ANALYZE:\s*([\s\S]*)/);
    if (!textMatch) return '[]';
    
    const text = textMatch[1];
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
    const doctors: any[] = [];
    const lines = text.split('\n').filter(line => line.trim().length > 20);
    
    for (let i = 0; i < lines.length && doctors.length < 5; i++) {
      const line = lines[i].trim();
      
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–∞—Ö
      if (this.looksLikeDoctorInfo(line)) {
        const doctor = this.extractDoctorFromLine(line);
        if (doctor) {
          doctors.push({
            id: `fallback_${i}`,
            ...doctor
          });
        }
      }
    }
    
    return JSON.stringify(doctors);
  }

  private looksLikeDoctorInfo(line: string): boolean {
    const doctorIndicators = [
      /dr\.?\s+[a-z]/i,
      /docteur\s+[a-z]/i,
      /[A-Z][a-z]+\s+[A-Z][a-z]+.*(?:cardiologue|dentiste|m√©decin|gyn√©cologue)/i,
      /rendez-vous.*[A-Z][a-z]+\s+[A-Z][a-z]+/i
    ];
    
    return doctorIndicators.some(pattern => pattern.test(line)) && 
           line.length > 30 && 
           line.length < 300;
  }

  private extractDoctorFromLine(line: string): any | null {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const nameMatch = line.match(/(?:Dr\.?\s+|Docteur\s+)?([A-Z][a-z]+\s+[A-Z][a-z]+)/);
    if (!nameMatch) return null;
    
    const name = nameMatch[1];
    const fullName = nameMatch[0].includes('Dr') ? nameMatch[0] : `Dr. ${name}`;
    
    // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
    let specialty = 'M√©decin';
    const specialtyMatch = line.match(/(cardiologue|dentiste|m√©decin|gyn√©cologue|dermatologue|ophtalmologue|p√©diatre)/i);
    if (specialtyMatch) {
      specialty = specialtyMatch[1].charAt(0).toUpperCase() + specialtyMatch[1].slice(1).toLowerCase();
    }
    
    // –ò—â–µ–º –∞–¥—Ä–µ—Å
    let address = 'Paris';
    const addressMatch = line.match(/(\d+[^,]*(?:rue|avenue|boulevard)[^,]*)/i);
    if (addressMatch) {
      address = addressMatch[1];
    }
    
    return {
      name: fullName,
      specialty,
      address,
      availability: [],
      next_availability: null
    };
  }

  private parseAIResponse(aiResponse: string): any[] {
    try {
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞
      const cleanResponse = aiResponse.trim();
      
      // –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = cleanResponse.match(/\[[\s\S]*\]/);
      if (!jsonMatch) {
        console.log('‚ö†Ô∏è No JSON array found in AI response');
        return [];
      }
      
      const jsonString = jsonMatch[0];
      const doctors = JSON.parse(jsonString);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (!Array.isArray(doctors)) {
        console.log('‚ö†Ô∏è AI response is not an array');
        return [];
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞
      const validDoctors = doctors.filter(doctor => 
        doctor && 
        typeof doctor === 'object' && 
        doctor.name && 
        typeof doctor.name === 'string' &&
        doctor.name.length > 3
      );
      
      console.log(`‚úÖ AI parsed ${validDoctors.length} valid doctors from response`);
      return validDoctors;
      
    } catch (error) {
      console.error('Failed to parse AI response:', error);
      console.log('Raw AI response:', aiResponse.substring(0, 500));
      return [];
    }
  }

  private extractTextFromHTML(html: string): string {
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    return html
      .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
      .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
      .replace(/<[^>]+>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }
}
